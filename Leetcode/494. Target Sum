class Solution {
public:

    int isSubsetSum(vector<int>arr, int sum)
    {
        // code here
        int len=arr.size();
        int t[len+1][sum+1];
        
        for(int i=0;i<len+1;i++)
        for(int j=0;j<sum+1;j++)
        if(i==0)
        t[i][j]=0;
        
        for(int i=0;i<len+1;i++)
        for(int j=0;j<sum+1;j++)
        if(j==0)
        t[i][j]=1;
        
        for(int i=1;i<len+1;i++)
        {
           for(int j=0;j<sum+1;j++)
           {
                if(arr[i-1]<=j)
                t[i][j]=t[i-1][j-arr[i-1]] + t[i-1][j];
                if(arr[i-1]>j or arr[i-1]==0)
                t[i][j]=t[i-1][j];
           }
        }
        
        int zero_count=0;
        for(int i=0;i<arr.size();i++)
        if(arr[i]==0)
        zero_count=zero_count+1;
        
        // return t[len][sum];
        return pow(2,zero_count)*t[len][sum];
    }
    
    int findTargetSumWays(vector<int>& nums, int target) 
    {
        int ans=0;
        int s1=0,sum=0;
        
        for(int i=0;i<nums.size();i++)
        sum=sum+nums[i];
        s1=(sum+target)/2;
        
        if(target>sum or (sum+target)%2!=0 or (target+sum) < 0)
        return 0;
        ans=isSubsetSum(nums,s1);
        return ans;
    }
};
