class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int i,j;
        int hash[100001]={0};
        for(i=0;i<intervals.size();i++){
            for(j=intervals[i][0];j<=intervals[i][1];j++){
                hash[j]=1;
            }
        }
        
        vector<vector<int>>result;
        
        for(i=0;i<100001;i++){
            int start=0,end=0;
            if(hash[i]==1){
                start=i;
                while(hash[i]==1){
                    i++;
                }
                end=i-1;
                vector<int>p;
                p.push_back(start);
                p.push_back(end);
                result.push_back(p);
            }
        }
        return result;
        
    }
};

//(will pass all the test cases)...
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) 
    {
        vector<vector<int>>ans;
        stack<pair<int,int>> s;
        sort(intervals.begin(),intervals.end());
        s.push({intervals[0][0],intervals[0][1]});
        
        for(int i=1;i<intervals.size();i++)
        {
            int start1=s.top().first;
            int end1=s.top().second;
            int start2=intervals[i][0];
            int end2=intervals[i][1];
            
            if(end1>=start2)
            {
                s.pop();
                int minimum=min(start1,start2);
                int maximum=max(end1,end2);
                s.push({minimum,maximum});
            }
            else
            s.push({start2,end2});
        }
        
        while(!s.empty())
        {
            vector<int> temp;
            temp.push_back(s.top().first);
            temp.push_back(s.top().second);
            ans.push_back(temp);
            s.pop();
        }
        return ans;
    }
};
