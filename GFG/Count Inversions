

class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    
    long long int merge(long long arr[], long long left, long long mid, long long right)
    {
        long long n1=mid-left+1;
        long long m1=right-mid;
        long long a[n1];
        long long b[m1];

        for(long long i=0;i<n1;i++)
        a[i]=arr[left+i];

        for(long long i=0;i<m1;i++)
        b[i]=arr[mid+i+1];
        
        long long i=0,j=0,k=left,count=0;
        while(i<n1 && j<m1)
        {
            if(a[i]<=b[j])
            {
                arr[k]=a[i];
                i++;
                k++;
            }
            else
            {
                arr[k]=b[j];
                j++;
                k++;
                count+=(n1-i);
            }
        }
        while(i<n1)
        {
            arr[k]=a[i];
            i++;
            k++;
        }
        while(j<m1)
        {
            arr[k]=b[j];
            j++;k++;
        }
        return count;
    }
    
    long long int mergeSort(long long arr[], long long left, long long right)
    {
        long long int count=0;
        if(left<right)
        {
            long long mid=left+(right-left)/2;
            count+=mergeSort(arr,left,mid);
            count+=mergeSort(arr,mid+1,right);
            count+=merge(arr,left,mid,right);
            
        }
        return count;
    }
    
    long long int inversionCount(long long arr[], long long n)
    {
        // Your Code Here
        return mergeSort(arr,0,n-1);;
    }

};
