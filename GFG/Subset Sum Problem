    bool isSubsetSum(vector<int>arr, int sum){
        // code here
        int n=arr.size();
        int t[n+1][sum+1];
        int i,j;
        for(i=0;i<=n;i++){
            for(j=0;j<=sum;j++){
                if(i==0){
                    t[i][j]=false;
                }
                if(j==0){
                    t[i][j]=true;
                }
            }
        }
        
        for(i=1;i<n+1;i++){
            for(j=0;j<sum+1;j++){
                if(arr[i-1]<=j){
                    t[i][j]=t[i-1][j-arr[i-1]] or t[i-1][j];
                }
                if(arr[i-1]>j){
                    t[i][j]=t[i-1][j];
                }
            }
        }
        return t[n][sum];
        
        
    }
    
};

/////////////////recursion code (this code will get TLE but is correct)////////
class Solution{   
public:

    bool subset(vector<int>arr, int len, int sum)
    {
        if(sum==0)
        return true;
        
        if(len==0)
        return false;
        
        if(arr[len-1]==sum)
        return true;
        else if(arr[len-1]<sum)
        return subset(arr,len-1,sum) || subset(arr,len-1,sum-arr[len-1]);
        else
        return subset(arr,len-1,sum);
    }
    
    bool isSubsetSum(vector<int>arr, int sum){
        // code here
        int len=arr.size();
        int result=subset(arr,len,sum);
        if(result)
        return true;
        else
        return false;
        
        
    }
    
};
