//Brut Force Solution... O(n^2)
class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& m, int n) 
    {
        // code here 
        if(n==0)
        return -1;
        
    	int i,j,b=-2,k=0;
    	int count=0;
    	
    	for(i=0;i<n;i++)
    	{
    	    for(j=0;j<n;j++)
    	    {
    	        if(m[i][j]==0)
    	        {
    	            count++;
    	        }
    	        if(count==n)
    	        {
    	            b=i;
    	            k=1;
    	           // cout<<b<<endl;
    	            break;
    	        }
    	        if(m[i][j]==1)
    	        {
    	            count=0;
    	            break;
    	        }
    	        
    	    }
    	    if(k==1)
    	    break;
    	}
    	
    	if(b==-2)
    	return -1;
    	
    	count=0;
    	for(i=0;i<n;i++)
    	{
    	    if(m[i][b]==0)
    	    {
    	        count++;
    	    }
    	    
    	}
    	
    	if(count==n)
    	return -1;
    	else if(count==n-1 and n>2)
    	return -1;
    	else
    	return b;
    }
};

//O(n) Solution...
class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& m, int n) 
    {
        // code here
        stack<int>s;
        int i,j,k;
        
        for(i=0;i<n;i++){
            s.push(i);
        }
        while(s.size()>=2){
            i=s.top();
            s.pop();
            j=s.top();
            s.pop();
            
            if(m[i][j]==1)
            s.push(j);
            if(m[i][j]==0)
            s.push(i);
        }
        
        k=s.top();
        s.pop();
        for(i=0;i<n;i++){
            if(i!=k){
                if(m[k][i]!=0 or m[i][k]!=1)
                return -1;
            }
            
        }
        return k;
        
    }
};

