bool subset(int n, int arr[], int sum){
    // code here
    int t[n+1][sum+1];
    int i,j;
    for(i=0;i<=n;i++){
        for(j=0;j<=sum;j++){
            if(i==0){
                t[i][j]=false;
            }
            if(j==0){
                t[i][j]=true;
            }
        }
    }
    
    for(i=1;i<n+1;i++){
        for(j=0;j<sum+1;j++){
            if(arr[i-1]<=j){
                t[i][j]=t[i-1][j-arr[i-1]] or t[i-1][j];
            }
            if(arr[i-1]>j){
                t[i][j]=t[i-1][j];
            }
        }
    }
    return t[n][sum];
}
class Solution{
public:
    int equalPartition(int n, int a[])
    {
        // code here
        int i,sum=0,result;
        for(i=0;i<n;i++){
            sum=sum+a[i];
        }
        if(sum%2!=0)
        return false;
        else
        result=subset(n,a,sum/2);
        return result;
        
    }
};
//Same as Subset Sum Problem
///////////// Recursion Apporach (This code gives TLE but the code is correct)////////
class Solution{
public:

    bool subset(int arr[], int len, int sum)
    {
        if(sum==0)
        return true;
        
        if(len==0)
        return false;
        
        if(arr[len-1]==sum)
        return true;
        else if(arr[len-1]<sum)
        return subset(arr,len-1,sum) || subset(arr,len-1,sum-arr[len-1]);
        else
        return subset(arr,len-1,sum);
    }
    
    int equalPartition(int n, int arr[])
    {
        // code here
        int sum=0,i,j;
        for(i=0;i<n;i++)
        sum=sum+arr[i];
        
        if(sum%2!=0)
        return false;
        
        else
        {
            int result=subset(arr,n,sum/2);
            if(result)
            return true;
            else
            return false;
        }
        
    }
};
