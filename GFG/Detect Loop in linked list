////////first apporach//////////
class Solution
{
    public:
    //Function to check if the linked list has a loop.
    bool detectLoop(Node* head)
    {
        // your code here
        if(head==NULL)
        return false;
        
        Node* slow=head;
        Node* fast=head;
        
        while(fast!=NULL and fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(fast==slow)
            return true;
        }
        return false;
    }
};

///////second apporach//////////
class Solution
{
    public:
    //Function to check if the linked list has a loop.
    bool detectLoop(Node* head)
    {
        // your code here
        if(head==NULL)
        return false;
        
        map<Node*,int>m;
        while(head!=NULL)
        {
            if(!m[head])
            {
                m[head]=1;
                head=head->next;
            }
            else
            return true;
        }
        return false;
        
    }
};

/////This code wil give TLE because time complexity is O(n^2) but is correct/////////
class Solution
{
    public:
    //Function to check if the linked list has a loop.
    bool detectLoop(Node* head)
    {
        // your code here
        if(head==NULL)
        return false;
        
        vector<Node*>v;
        
        while(head!=NULL)
        {
            for(int i=0;i<v.size();i++)
            {
                if(v[i]==head)
                return true;
            }
            v.push_back(head);
            head=head->next;
        }
        return false;
        
    }
};
