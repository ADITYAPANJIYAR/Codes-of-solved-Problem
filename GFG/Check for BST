//Brut force apporach
class Solution
{
    public:
    bool has_duplicates(const std::vector<int>& vec) {
    std::unordered_set<int> seen_elements;

    for (int element : vec) {
        if (seen_elements.find(element) != seen_elements.end()) {
            return true;
        } else {
            seen_elements.insert(element);
        }
    }

    return false;
}
    vector<int>ans;
    void traversal(Node *root)
    {
        if(root==NULL)
        return;
        
        if(root->left!=NULL)
        traversal(root->left);
        ans.push_back(root->data);
        if(root->right!=NULL)
        traversal(root->right);
    }
    
    //Function to check whether a Binary Tree is BST or not.
    bool isBST(Node* root) 
    {
        // Your code here
        if(root==NULL)
        return true;
        traversal(root);
        vector<int>temp;
        for (int i=0; i<ans.size(); i++) 
        temp.push_back(ans[i]); 
        sort(temp.begin(), temp.end());
        if (has_duplicates(temp))
        return false;
        if(ans==temp)
        return true;
        else
        return false;
        
    }
};
