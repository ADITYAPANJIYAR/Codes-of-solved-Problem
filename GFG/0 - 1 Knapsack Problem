int knapSack(int w, int wt[], int val[], int n) 
{ 
   // Your code here
   if(n==0 or w==0)
   return 0;
   else if(wt[n-1]<=w){
       return max(val[n-1]+knapSack(w-wt[n-1],wt,val,n-1),knapSack(w,wt,val,n-1));
   }
   else{
       return knapSack(w,wt,val,n-1);
   }
}
//this code will pass only 1142 out of 1210 testcases.(TLE)
    
    
//Memozized version...
int static t[1002][1002];
int knapsack(int w,int wt[],int val[],int n)
{
    if(n==0 or w==0)
    return 0;
    if(t[n][w]!=-1)
        return t[n][w];
    if(wt[n-1]<=w){
       return t[n][w]=max(val[n-1]+knapsack(w-wt[n-1],wt,val,n-1),knapsack(w,wt,val,n-1));
   }
   else if(wt[n-1]>w){
       return t[n][w]=knapsack(w,wt,val,n-1);
   }
}
class Solution
{
    public:
    int knapSack(int w, int wt[], int val[], int n) 
    { 
       // Your code here
       memset(t, -1, sizeof(t));
       int result;
       result=knapsack(w,wt,val,n);
       return result;
    }
};
//this code will pass all the testcases...

//Top-down apporach...
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int w, int wt[], int val[], int n) 
    { 
        // Your code here
        int t[n+1][w+1];
        
        for(int i=0;i<n+1;i++)
        for(int j=0;j<w+1;j++)
        if(i==0 or j==0)
        t[i][j]=0;
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<w+1;j++)
            {
                if(wt[i-1]<=j)
                t[i][j]=max(val[i-1]+t[i-1][j-wt[i-1]], t[i-1][j]);
                else //if(wt[i-1]>j)
                t[i][j]=t[i-1][j];
            }
        }
        return t[n][w];
    }
};
